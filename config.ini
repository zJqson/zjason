;NOTE:
;1. when data is in form of {} or [], when adding elements always use "" (never '')
;2. Ending of } or ] should not be in new line, always just after data is ending. | EX: ["data1", "data2", "data3"]
; (; or # this sign is for comment, but never do that in the same line where data is ending.) | EX: App1 = False ;comment here which is wrong, so use new line.


[settings]
;Margin Loan and Repayment 
App1 = False
;Calculate PNL 
App2 = True

#List of Currencies that can be used as quote currency 
CURRENCIES = ["USD", "CAD", "MXN", "BRL", "ARS", "CLP", "EUR", "GBP", "FRF", "DEM", "CNY", "JPY", "INR", "AUD", "NZD", "CHF", "SEK", "NOK", "DKK", "PLN", "CZK", "HUF", "RON", "BGN", "UAH", "HRK", "RUB", "TRY", "ZAR", "ILS", "SAR", "QAR", "KWD", "AED", "THB", "SGD", "MYR", "PHP", "IDR", "VND", "KRW", "HKD", "TWD", "MOP", "BHD", "OMR", "JOD", "EGP", "PKR", "AFN", "LKR", "NPR", "MVR", "BDT", "IRR", "IQD", "SYR", "YER", "SYP", "AZN", "GEL", "AMD", "BYN", "TJS", "KZT", "UZS", "TMN", "MNT", "KGS", "FKP", "JMD", "HTG", "TTD", "XCD", "GYD", "SRD", "BBD", "COP", "PEN", "BOB", "PYG", "UYU", "FJD", "PGK", "SBD", "VUV", "WST", "TOP", "SCR", "MUR", "MWK", "ZMW", "BWP", "SZL", "LSL", "NAD", "MGA", "ERN", "DJF", "SOS", "SDG", "DZD", "LYD", "TND", "MAD", "GNF", "LRD", "SLL", "GMD", "CVE", "STN", "MRU", "AOA", "ZWL", "USDT", "BUSD", "TUSD", "USDC"]



;Default Rates to go to if FX Rates file missing
EXCHANGE_RATES = { "USD": 1,"CAD": 0.78,"MXN": 0.049,"BRL": 0.19,"ARS": 0.0099,
    "CLP": 0.0013,"EUR": 1.12,"GBP": 1.34,"FRF": 0.18,"DEM": 0.62,"CNY": 0.16,"JPY": 0.0091,"INR": 0.014,
    "AUD": 0.72, "NZD": 0.68, "CHF": 1.09, "SEK": 0.11, "NOK": 0.11, "DKK": 0.16, "PLN": 0.24, "CZK": 0.044, "HUF": 0.0034, "RON": 0.23,
    "BGN": 0.57, "UAH": 0.036, "HRK": 0.16, "RUB": 0.013, "TRY": 0.12, "ZAR": 0.067, "ILS": 0.31, "SAR": 0.27, "QAR": 0.27, "KWD": 3.31,
    "AED": 0.27, "THB": 0.031, "SGD": 0.73, "MYR": 0.24, "PHP": 0.021, "IDR": 0.000069, "VND": 0.000043, "KRW": 0.00089, "HKD": 0.13,
    "TWD": 0.035, "MOP": 0.12, "BHD": 2.65, "OMR": 2.6, "JOD": 1.41, "EGP": 0.064, "PKR": 0.0063, "AFN": 0.012, "LKR": 0.005, "NPR": 0.0085,
    "MVR": 0.065, "BDT": 0.012, "IRR": 0.000024, "IQD": 0.00068, "SYR": 0.00046, "YER": 0.0039, "SYP": 0.00058, "AZN": 0.59, "GEL": 0.31, "AMD": 0.0019, 
    "BYN": 0.39, "TJS": 0.087, "KZT": 0.0023, "UZS": 0.000094, "TMN": 0.11, "MNT": 0.00035, "KGS": 0.011, "FKP": 1.34, "JMD": 0.007, "HTG": 0.0093, 
    "TTD": 0.15, "XCD": 0.37, "GYD": 0.0047, "SRD": 0.12, "BBD": 0.49, "COP": 0.00027, "PEN": 0.28, "BOB": 0.14, "PYG": 0.00015, "UYU": 0.023,
    "FJD": 0.47, "PGK": 0.28,"SBD": 0.12,"VUV": 0.009,"WST": 0.38,"TOP": 0.45,"SCR": 0.052,"MUR": 0.024,"MWK": 0.0013,"ZMW": 0.061,"BWP": 0.092,
    "FJD": 0.47, "PGK": 0.28,"SBD": 0.12,"VUV": 0.009,"WST": 0.38,"TOP": 0.45,"SCR": 0.052,"MUR": 0.024,"MWK": 0.0013,"ZMW": 0.061,"BWP": 0.092,
    "SZL": 0.062, "LSL": 0.062, "NAD": 0.062, "MGA": 0.00025, "ERN": 0.063, "DJF": 0.0056, "SOS": 0.0017, "SDG": 0.021, "DZD": 0.0074,
    "LYD": 0.25, "TND": 0.35, "MAD": 0.11, "GNF": 0.0009, "LRD": 0.006, "SLL": 0.000096, "GMD": 0.018, "CVE": 0.0098, "STN": 0.051,
    "MRU": 0.027, "AOA": 0.0015, "ZWL": 0.0027, "USDT": 1, "BUSD": 1, "TUSD": 1, "USDC": 1 }

[app1] 
#Loan and Repamynent App 
;App1 Data
;ONLY MODIFY BELOW PARAMETERS IF NEEDED
;input .csv file path
CSV_PATH = input16.csv
OP_CSV_PATH = ACB UPLOAD.csv

;column name you want to check for positive and negative values
COLUMN_NAME_TO_CHECK = Current Position Quantity
ASSET_NAME_TO_CHECK = asset
PREV_COL_NAME_TO_CHECK = Current Position Quantity
BUY_SELL_COL_NAME = action
DATE_ROW_NAME = Date

;for spliting file into rows
SPLIT_FILE = True
SPLIT_ROW_COUNT = 30000

;when this is False, script will overwrite input .csv file with outputme
;if this is True, then it will create new .csv file with (OP_CSV_PATH) path
MAKE_NEW_OUTPUT_FILE = True

;enable log in new column
ENABLE_LOG = True

[app2]
ACCOUNT_NAME_MAPPING = {
        "oanda": "Oanda",
        "bitgetfutures": "Bitget Futures",
        "bitgetmainfutures": "Bitget Futures"}
;script is calculating for this ['open long', 'open_long', 'long', 'buy_long', 'buy long'] | buy
;script is calculating for this ['open short', 'open_short', 'short', 'sell_short', 'sell short'] | sell
ACTION_NAME_MAPPING = {"open_long": "Open Long"}

;just add prefix not extentions
INPUT_CSV_PATH = test2
INPUT_READ_PRIORITIES = ["xlsm", "xlsx", "csv"]

OUTPUT_CSV_PATH = input16.csv
RESULT_OUTPUT_CSV_PATH = test_result.csv

;when True, whatever account name is written in {INPUT_CSV_PATH} File, that will be used.
;when False, mapping based data will be used
OutputSameFormat = False
Log = True

;track realized pnl action for Proceeds and ACB when it's True, good for funding fee 
TrackRealizedPNL = True

;adjust currency balance
;when True
;currentPositionquantity is negative (currencybalance = currencybalance + currentPositionquantity*averageprice)
AdjustCurrencyBalance = False 


;Forgot
AdjustRates = False

;Forgot 
AdjustRates2 = False

;this will use exchage rates from csv file instead of script.
AdjustRatesFromCSV = False

;FX Rates File 
AdjustRatesFromCSV_PATH = FX Rates.csv

;default currency.
Default_Currency = USD

;this will be consider when quote currency is blank, and asset not in dicitonary
Default_Quote_Currency = USD

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; APP2

;APP2 DATA
INPUT_CSV_PATH_APP2 = input16.csv
OUTPUT_CSV_PATH_APP2 = output.csv